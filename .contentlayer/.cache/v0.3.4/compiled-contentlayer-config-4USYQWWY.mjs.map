{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../plugins/codeBlock.ts"],
  "sourcesContent": ["import {defineDocumentType, defineNestedType, makeSource} from \"contentlayer/source-files\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeSlug from \"rehype-slug\";\nimport {visit} from \"unist-util-visit\";\nimport pluginCodeBlock from \"./plugins/codeBlock\";\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n  url: {type: \"string\", resolve: (doc) => `/${doc._raw.flattenedPath}`},\n}\n\n\nexport const Doc = defineDocumentType(() => ({\n  name: \"Doc\",\n  filePathPattern: `docs/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {type: \"string\", required: true},\n    description: {type: \"string\", required: false},\n    date: {type: \"date\", required: false},\n  },\n  computedFields\n}));\n\n\nconst AuthorProperties = defineNestedType(() => ({\n  name: \"AuthorProperties\",\n  fields: {\n    name: {type: \"string\", required: true},\n    link: {type: \"string\", required: false},\n    avatar: {type: \"string\", required: false},\n    username: {type: \"string\", required: false},\n  }\n}));\n\nexport const BlogPost = defineDocumentType(() => ({\n  name: \"BlogPost\",\n  filePathPattern: `blog/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {type: \"string\", required: true},\n    description: {type: \"string\", required: true},\n    date: {type: \"date\", required: true},\n    draft: {type: \"boolean\", required: false},\n    tags: { type: 'list', of: { type: 'string' } },\n    author: {type: \"nested\",of: AuthorProperties, required: false},\n    image: {type: \"string\", required: false},\n  },\n  computedFields: {\n    ...computedFields,\n    // Date format June 22nd 2023\n    formattedDate: {\n      type: \"string\",\n      resolve: (doc) => {\n        const date = new Date(doc.date);\n        const options = {year: \"numeric\", month: \"long\", day: \"numeric\"};\n        return date.toLocaleDateString(\"en-US\", options);\n      }\n    },\n    // add https://nextui.org to the image path\n    imageAsParams: {\n      type: \"string\",\n      resolve: (doc) => {\n        const image = doc.image;\n        if (image) {\n          return `https://nextui.org${image}`;\n        }\n      }\n    }\n  }\n}));\n\nexport default makeSource({\n  contentDirPath: \"./content\",\n  documentTypes: [Doc, BlogPost],\n  mdx: {\n    remarkPlugins: [remarkGfm, pluginCodeBlock],\n    rehypePlugins: [\n      rehypeSlug,\n      () => (tree) => {\n        visit(tree, \"element\", (node) => {\n          if (node.tagName === \"code\" && node.data && node.data.meta) {\n            node.properties.meta = node.data.meta;\n          }\n        });\n      },\n    ],\n  },\n});\n", "import {visit} from \"unist-util-visit\";\n\nfunction remarkCodePlugin() {\n  return (tree: any) => {\n    visit(tree, \"code\", (node) => {\n      if (node.lang === \"codeBlock\") {\n        const meta = node.meta || \"\";\n        const value = node.value || \"\";\n\n        if (!meta || !value) {\n          return;\n        }\n\n        // Use Snippet to render code block\n        Object.assign(node, {\n          type: \"mdxJsxFlowElement\",\n          name: \"Snippet\",\n          attributes: [\n            {\n              type: \"mdxJsxAttribute\",\n              name: \"disableTooltip\",\n              value: true,\n            },\n            {\n              type: \"mdxJsxAttribute\",\n              name: \"fullWidth\",\n              value: true,\n            },\n            {\n              type: \"mdxJsxAttribute\",\n              name: \"hideSymbol\",\n              value: true,\n            },\n            {\n              type: \"mdxJsxAttribute\",\n              name: \"classNames\",\n              value: {\n                type: \"mdxJsxAttributeValueExpression\",\n                value:\n                  \"{base: 'bg-code-background text-code-foreground' , pre: 'font-light text-base', copyButton: 'text-lg text-zinc-500 mr-2'}\",\n                data: {\n                  estree: {\n                    type: \"Program\",\n                    body: [\n                      {\n                        type: \"ExpressionStatement\",\n                        expression: {\n                          type: \"ObjectExpression\",\n                          properties: [\n                            {\n                              type: \"Property\",\n                              method: false,\n                              shorthand: false,\n                              computed: false,\n                              key: {\n                                type: \"Identifier\",\n                                name: \"base\",\n                              },\n                              value: {\n                                type: \"Literal\",\n                                value: \"bg-code-background text-code-foreground\",\n                                raw: \"'bg-code-background text-code-foreground'\",\n                              },\n                              kind: \"init\",\n                            },\n                            {\n                              type: \"Property\",\n                              method: false,\n                              shorthand: false,\n                              computed: false,\n                              key: {\n                                type: \"Identifier\",\n                                name: \"pre\",\n                              },\n                              value: {\n                                type: \"Literal\",\n                                value: \"font-light text-base\",\n                                raw: \"'font-light text-base'\",\n                              },\n                              kind: \"init\",\n                            },\n                            {\n                              type: \"Property\",\n                              method: false,\n                              shorthand: false,\n                              computed: false,\n                              key: {\n                                type: \"Identifier\",\n                                name: \"copyButton\",\n                              },\n                              value: {\n                                type: \"Literal\",\n                                value: \"text-lg text-zinc-500 mr-2\",\n                                raw: \"'text-lg text-zinc-500 mr-2'\",\n                              },\n                              kind: \"init\",\n                            },\n                          ],\n                        },\n                      },\n                    ],\n                    sourceType: \"module\",\n                    comments: [],\n                  },\n                },\n              },\n            },\n          ],\n          children: [\n            {\n              type: \"mdxJsxFlowElement\",\n              name: \"Codeblock\",\n              attributes: [\n                {\n                  type: \"mdxJsxAttribute\",\n                  name: \"removeIndent\",\n                  value: true,\n                },\n                {\n                  type: \"mdxJsxAttribute\",\n                  name: \"language\",\n                  value: meta,\n                },\n                {\n                  type: \"mdxJsxAttribute\",\n                  name: \"codeString\",\n                  value: value,\n                },\n              ],\n            },\n          ],\n        });\n      }\n    });\n  };\n}\n\nexport default remarkCodePlugin;\n"],
  "mappings": "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",
  "names": ["visit", "visit"]
}
